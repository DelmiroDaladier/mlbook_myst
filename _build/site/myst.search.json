{"version":"1","records":[{"hierarchy":{"lvl1":"MyST Quickstart"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"MyST Quickstart"},"content":"\n\nThis repository contains the files used in the \n\nquickstart guide, and can be used to follow that guide, before trying MyST with your own content.\n\nNote\n\n This is not a good example of an actual MyST project! The repositories purpose is to be a simple markdown + notebook repository that can be transformed throughout a tutorial.\n\nThe goals of the \n\nquickstart guide are:\n\nCreate a myst site, using the standard template\n\nImprove the frontmatter, to add authors, affiliations and other metadata\n\nExport the paper as a PDF, Word document, and LaTeX files\n\nIntegrate a Jupyter Notebook output into our paper, to improve reproducibility\n\nPublish a website of with our work ðŸš€","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"MyST Quickstart","lvl2":"Improving Frontmatter and MyST Site"},"type":"lvl2","url":"/#improving-frontmatter-and-myst-site","position":2},{"hierarchy":{"lvl1":"MyST Quickstart","lvl2":"Improving Frontmatter and MyST Site"},"content":"","type":"content","url":"/#improving-frontmatter-and-myst-site","position":3},{"hierarchy":{"lvl1":"MyST Quickstart","lvl2":"Export as a PDF"},"type":"lvl2","url":"/#export-as-a-pdf","position":4},{"hierarchy":{"lvl1":"MyST Quickstart","lvl2":"Export as a PDF"},"content":"","type":"content","url":"/#export-as-a-pdf","position":5},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/chapter1","position":0},{"hierarchy":{"lvl1":""},"content":"","type":"content","url":"/chapter1","position":1},{"hierarchy":{"lvl1":"Chapter 2"},"type":"lvl1","url":"/chapter2","position":0},{"hierarchy":{"lvl1":"Chapter 2"},"content":"","type":"content","url":"/chapter2","position":1},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"2.13 Convexhull"},"type":"lvl2","url":"/chapter2#id-2-13-convexhull","position":2},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"2.13 Convexhull"},"content":"\n\nimport matplotlib.pyplot as plt\n\nranking = [1, 1, 1, 0, 1, 0, 0, 1, 0, 0]\nx = [0, 0, 0, 300, 300, 300, 600, 600, 600, 900, 1200]\ny = [0, 200, 400, 400, 600, 800, 800, 1000, 1200, 1200, 1200]\n\nh = 1200\nw = 1200\ngrid_step = 120\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\nax.set_ylim(0, h)\n\nax.set_xticks([0, 120, 240, 360, 480, 600, 720, 840, 960, 1080, 1200])\nax.set_xticklabels(['', '', '', '0.25', '', '', '0.50', '', '', '0.75', '1.00'])\n\nax.set_yticks([0, 120, 240, 360, 480, 600, 720, 840, 960, 1080, 1200])\nax.set_yticklabels(['', '0.17', '0.33', '', '0.50', '0.67', '', '0.83', '1.00', '', ''])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n\nax.plot(x, y, linestyle='dashed', marker='o')\n\nax.plot([x[0], x[2]], [y[0], y[2]], color='red', linewidth=4)\nax.plot([x[2], x[8]], [y[2], y[8]], color='red', linewidth=2)\nax.plot([x[8], x[10]], [y[8], y[10]], color='red', linewidth=4)\n\nax.set_xlabel(\"False positive rate\")\nax.set_ylabel(\"True positive rate\")\nplt.show()\n\nimport matplotlib.pyplot as plt\n\nx = [13, 24, 32, 42, 49, 63, 71, 74, 80, 89]\ny = [0, 0, 67, 67, 67, 67, 67, 67, 100, 100]\ny1 = [33, 33, 60, 60, 60, 60, 60, 60, 67, 67]\n\nh = 100\nw = 100\ngrid_step = 10\nlwd = 2\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\nax.set_ylim(0, h)\n\nax.set_xticks(x)\nax.set_xticklabels([v / 100 for v in x])\nax.set_yticks(range(0, h + 1, grid_step))\nax.set_yticklabels([v / 100 for v in range(0, h + 1, grid_step)])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, color='gray', linestyle='None')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, color='gray', linestyle='None')\n\nax.plot(x, y, marker='o', linestyle='None', color='red')\nax.plot([0, x[1]], [y[0], y[1]], linewidth=4, color='red')\nax.plot([x[1], x[2]], [y[1], y[2]], linewidth=lwd, color='red')\nax.plot([x[2], x[7]], [y[2], y[7]], linewidth=lwd, color='red')\nax.plot([x[7], x[8]], [y[7], y[8]], linewidth=lwd, color='red')\nax.plot([x[8], 100], [y[8], y[9]], linewidth=4, color='red')\n\nax.plot(x, y1, marker='o', linestyle='None', color='blue')\nax.plot([0, x[1]], [y1[0], y1[1]], linestyle='dashed', linewidth=lwd, color='blue')\nax.plot([x[1], x[2]], [y1[1], y1[2]], linestyle='dashed', linewidth=lwd, color='blue')\nax.plot([x[2], x[7]], [y1[2], y1[7]], linestyle='dashed', linewidth=lwd, color='blue')\nax.plot([x[7], x[8]], [y1[7], y1[8]], linestyle='dashed', linewidth=lwd, color='blue')\nax.plot([x[8], 100], [y1[8], y1[9]], linestyle='dashed', linewidth=lwd, color='blue')\n\nax.set_xlabel(\"Original score\")\nax.set_ylabel(\"Calibrated probability\")\nplt.show()\n\n","type":"content","url":"/chapter2#id-2-13-convexhull","position":3},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Covarage"},"type":"lvl2","url":"/chapter2#covarage","position":4},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Covarage"},"content":"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nh = 50\nw = 50\ngrid_step = 10\n\nTP1 = 30\nFP1 = 10\nTP2 = 20\nFP2 = 20\n\nfig, ax = plt.subplots(figsize=(6, 6))\nax.set_xlim(0, w)\nax.set_ylim(0, h)\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\nax.set_yticks([0, TP2, TP1, h])\nax.set_yticklabels(['0', 'TP2', 'TP1', 'Pos'])\nax.set_xticks([0, FP1, FP2, w])\nax.set_xticklabels(['0', 'FP1', 'FP2', 'Neg'])\n\nfor gx in range(grid_step, w, grid_step):\n    ax.axvline(x=gx, color=\"gray\", linestyle=\"--\")\n\nfor gy in range(grid_step, h, grid_step):\n    ax.axhline(y=gy, color=\"gray\", linestyle=\"--\")\n\n\ncol1 = \"blue\"\nax.plot(FP1, TP1, 'o', color=col1)\nax.text(FP1, TP1, \"C1\", color=col1, verticalalignment='bottom', horizontalalignment='center')\n\ncol2 = \"red\"\nax.plot(FP2, TP2, 'o', color=col2)\nax.text(FP2, TP2, \"C2\", color=col2, verticalalignment='bottom', horizontalalignment='center')\n\nax.axhline(y=TP1, color=col1, linestyle=\"--\")\nax.axvline(x=FP1, color=col1, linestyle=\"--\")\n\nax.axhline(y=TP2, color=col2, linestyle=\"--\")\nax.axvline(x=FP2, color=col2, linestyle=\"--\")\n\nplt.show()\n\nimport matplotlib.pyplot as plt\n\nh = 750\nw = 250\ngrid_step = 50\n\nTP3 = 600\nFP3 = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\nax.set_ylim(0, h)\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\n\nax.set_xticks([0, FP3, w])\nax.set_xticklabels([0, \"FP3\", \"Neg\"])\nax.set_yticks([0, TP3, h])\nax.set_yticklabels([0, \"TP3\", \"Pos\"])\n\ngx = grid_step\nwhile gx <= w:\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\n    gx += grid_step\n\ngy = grid_step\nwhile gy <= h:\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n    gy += grid_step\n\ncol3 = \"green\"\nax.plot(FP3, TP3, marker='o', color=col3)\nax.text(FP3, TP3, \"C3\", verticalalignment='bottom', horizontalalignment='center')\nax.axhline(y=TP3, color=col3, linestyle='dotted')\nax.axvline(x=FP3, color=col3, linestyle='dotted')\n\nplt.show()\n\n","type":"content","url":"/chapter2#covarage","position":5},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Covgrad"},"type":"lvl2","url":"/chapter2#covgrad","position":6},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Covgrad"},"content":"\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\nranking = [1,1,1,0,1,0,0,1,0,0]\nx = [0,0,0,0,100,100,200,300,300,400,500,500]\ny = [0,100,200,300,300,400,400,400,500,500,500,500]\n\nh = 500\nw = 500\ngrid_step = 100\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\nax.set_ylim(0, h)\nax.set_xticks(x[:-1])\nax.set_xticklabels(['','','','','n1','','n2','n3','','n4','n5'])\nax.set_yticks(y[:-1])\nax.set_yticklabels(['','p1','p2','p3','','p4','','','p5','',''])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n\nfor i in range(11):\n    for j in range(11):\n        if i < j:\n            color = 'red'\n        elif i == j:\n            color = 'orange'\n        else:\n            color = 'green'\n        rect = patches.Rectangle((x[i], y[j]), x[i+1]-x[i], y[j+1]-y[j], facecolor=color)\n        ax.add_patch(rect)\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()\n\n","type":"content","url":"/chapter2#covgrad","position":7},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Covgrad 2"},"type":"lvl2","url":"/chapter2#covgrad-2","position":8},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Covgrad 2"},"content":"\n\nimport matplotlib.pyplot as plt\n\nranking = [1,1,1,0,1,0,0,1,0,0]\nx = [0,0,0,0,100,100,200,300,300,400,500]\ny = [0,100,200,300,300,400,400,400,500,500,500]\n\nh = 500\nw = 500\ngrid_step = 50\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\nax.set_ylim(0, h)\nax.set_xticks(x)\nax.set_xticklabels(['','','','','n1','','n2','n3','','n4','n5'])\nax.set_yticks(y)\nax.set_yticklabels(['','p1','p2','p3','','p4','','','p5','',''])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n\nax.text(x[3]+10, y[3]-15, \"A\", color=\"red\")\nax.text(x[5]+10, y[5]-15, \"B\", color=\"red\")\nax.text(x[8]+10, y[8]-15, \"C\", color=\"red\")\n\nax.plot(x, y, linestyle='solid', marker='o')\nax.plot([x[3], x[5]], [y[3], y[5]], linestyle='dashed', color=\"red\")\nax.plot([x[5], x[8]], [y[5], y[8]], linestyle='dashed', color=\"red\")\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()\n\n","type":"content","url":"/chapter2#covgrad-2","position":9},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Covrank"},"type":"lvl2","url":"/chapter2#covrank","position":10},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Covrank"},"content":"\n\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 500\ngrid_step = 10\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\nax.set_ylim(0, h)\nax.set_xticks([0, w])\nax.set_xticklabels(['0', 'Neg'])\nax.set_yticks([0, h])\nax.set_yticklabels(['0', 'Pos'])\n\nx = [0, w/3, 2*w/3, w]\ny = [0, h/3, 2*h/3, h]\n\nfor i in range(3):\n    for j in range(3):\n        if i < j:\n            color = 'red'\n        elif i == j:\n            color = 'orange'\n        else:\n            color = 'green'\n        ax.add_patch(plt.Rectangle((x[i], y[j]), x[i+1]-x[i], y[j+1]-y[j], color=color))\n\nx_curve = [0, 50, 100, 500]\ny_curve = [0, 200, 300, 500]\nax.plot(x_curve, y_curve, linestyle='dashed', color='black')\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, linestyle='dotted', color='gray')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, linestyle='dotted', color='gray')\n\nax.set_xlabel(\"Negatives sorted on decreasing score\")\nax.set_ylabel(\"Positives sorted on decreasing score\")\nplt.show()\n\nimport matplotlib.pyplot as plt\n\nh = 500\nw = 500\ngrid_step = 50\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\nax.set_ylim(0, h)\nax.set_xticks([0, 50, 100, 500])\nax.set_xticklabels(['0', 'FP1', 'FP2', 'Neg'])\nax.set_yticks([0, 200, 300, 500])\nax.set_yticklabels(['0', 'TP1', 'TP2', 'Pos'])\n\nx = [0, 50, 100, 500]\ny = [0, 200, 300, 500]\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, linestyle='dotted', color='gray')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, linestyle='dotted', color='gray')\n\nax.text(x[0]+10, y[0]+10, \"A\")\nax.text(x[1]+10, y[1], \"B\")\nax.text(x[2]+10, y[2], \"C\")\nax.text(x[3]-10, y[3]-15, \"D\")\n\nfor i in [1, 2]:\n    ax.axvline(x=x[i], linestyle='dashed', color='black')\n    ax.axhline(y=y[i], linestyle='dashed', color='black')\n\nax.plot(x, y, linestyle='solid', marker='o', color='black')\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()\n\n","type":"content","url":"/chapter2#covrank","position":11},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Covroc"},"type":"lvl2","url":"/chapter2#covroc","position":12},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Covroc"},"content":"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nh = 25\nw = 75\ngrid_step = 5\n\nTP1 = 15\nFP1 = 15\nTP2 = 20\nFP2 = 20\nTP3 = 20\nFP3 = 30\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\nax.set_ylim(0, h)\nax.set_xticks([0, FP1, FP2, FP3, w])\nax.set_xticklabels(['0', 'FP1', 'FP2', 'FP3', 'Neg'])\nax.set_yticks([0, TP1, TP2, h])\nax.set_yticklabels(['0', 'TP1', 'TP2-3', 'Pos'])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, linestyle='dotted', color='gray')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, linestyle='dotted', color='gray')\n\nx_diag = np.array([0, w])\ny_diag = (h / w) * x_diag\nax.plot(x_diag, y_diag, color='gray')\n\nx_diag2 = np.array([0, w])\ny_diag2 = x_diag2\nax.plot(x_diag2, y_diag2, linestyle='dashed', color='black')\n\nx_diag3 = np.array([0, w])\ny_diag3 = (h / w) * (x_diag3 - 10)\nax.plot(x_diag3, y_diag3, linestyle='dashed', color='black')\n\nax.plot(FP1, TP1, marker='o', color='blue')\nax.text(FP1, TP1, \"C1\", va='bottom', ha='center')\nax.axhline(y=TP1, color='blue', linestyle='dotted')\nax.axvline(x=FP1, color='blue', linestyle='dotted')\n\nax.plot(FP2, TP2, marker='o', color='red')\nax.text(FP2, TP2, \"C2\", va='bottom', ha='center')\nax.axhline(y=TP2, color='red', linestyle='dotted')\nax.axvline(x=FP2, color='red', linestyle='dotted')\n\nax.plot(FP3, TP3, marker='o', color='green')\nax.text(FP3, TP3, \"C3\", va='bottom', ha='center')\nax.axhline(y=TP3, color='green', linestyle='dotted')\nax.axvline(x=FP3, color='green', linestyle='dotted')\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()\n\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nh = 75\nw = 75\ngrid_step = 15\n\ntpr1 = 45\nfpr1 = 15\ntpr2 = 60\nfpr2 = 20\ntpr3 = 60\nfpr3 = 30\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\nax.set_ylim(0, h)\nax.set_xticks([0, fpr1, fpr2, fpr3, w])\nax.set_xticklabels(['0', 'fpr1', 'fpr2', 'fpr3', 'Neg'])\nax.set_yticks([0, tpr1, tpr2, h])\nax.set_yticklabels(['0', 'tpr1', 'tpr2-3', 'Pos'])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, linestyle='dotted', color='gray')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, linestyle='dotted', color='gray')\n\nx_diag = np.array([0, w])\ny_diag = (h / w) * x_diag\nax.plot(x_diag, y_diag, color='gray')\n\nx_diag2 = np.array([0, w])\ny_diag2 = 3 * x_diag2\ny_diag2_shifted = 3 * (x_diag2 - 30)\nax.plot(x_diag2, y_diag2_shifted, linestyle='dashed', color='black')\nax.plot(x_diag2, y_diag2, linestyle='dashed', color='black')\n\nax.plot(fpr1, tpr1, marker='o', color='blue')\nax.text(fpr1, tpr1, \"C1\", va='bottom', ha='center')\nax.axhline(y=tpr1, color='blue', linestyle='dotted')\nax.axvline(x=fpr1, color='blue', linestyle='dotted')\n\nax.plot(fpr2, tpr2, marker='o', color='red')\nax.text(fpr2, tpr2, \"C2\", va='bottom', ha='center')\nax.axhline(y=tpr2, color='red', linestyle='dotted')\nax.axvline(x=fpr2, color='red', linestyle='dotted')\n\nax.plot(fpr3, tpr3, marker='o', color='green')\nax.text(fpr3, tpr3, \"C3\", va='bottom', ha='center')\nax.axhline(y=tpr3, color='green', linestyle='dotted')\nax.axvline(x=fpr3, color='green', linestyle='dotted')\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()\n\n","type":"content","url":"/chapter2#covroc","position":13},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Decision Tree"},"type":"lvl2","url":"/chapter2#decision-tree","position":14},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Decision Tree"},"content":"\n\ngraph TD;\n    N0[\"â€˜Viagraâ€™\"] -->|\"=0\"| N11[\"â€˜lotteryâ€™\"];\n    N0 -->|\"=1\"| L3[\"cÌ‚(x)=spam\"]:::filled;\n    N11 -->|\"=0\"| L1[\"cÌ‚(x)=ham\"]:::filled;\n    N11 -->|\"=1\"| L2[\"cÌ‚(x)=spam\"]:::filled;\n\n    classDef filled fill:#cccccc,stroke:#000,color:#000;\n    class L1,L2,L3 filled;\n\n","type":"content","url":"/chapter2#decision-tree","position":15},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Pet"},"type":"lvl2","url":"/chapter2#pet","position":16},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Pet"},"content":"\n\ngraph TD;\n    N0[\"â€˜Viagraâ€™\"] -->|\"=0\"| N11[\"â€˜lotteryâ€™\"];\n    N0 -->|\"=1\"| L3[\"pÌ‚(x)=0.80\"]:::filled;\n    N11 -->|\"=0\"| L1[\"pÌ‚(x)=0.33\"]:::filled;\n    N11 -->|\"=1\"| L2[\"pÌ‚(x)=0.67\"]:::filled;\n\n    classDef filled fill:#cccccc,stroke:#000,color:#000;\n    class L1,L2,L3 filled;\n\n","type":"content","url":"/chapter2#pet","position":17},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Racc Unbalanced"},"type":"lvl2","url":"/chapter2#racc-unbalanced","position":18},{"hierarchy":{"lvl1":"Chapter 2","lvl2":"Racc Unbalanced"},"content":"\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nh = 500\nw = 1000\ngrid_step = 50\n\nx = [0, 100, 200, 1000]\ny = [0, 200, 300, 500]\n\nfig, ax = plt.subplots()\nax.set_xlim(0, w)\nax.set_ylim(0, h)\n\nax.set_xticks(x)\nax.set_xticklabels(['0', 'FP1', 'FP2', 'Neg'])\nax.set_yticks(y)\nax.set_yticklabels(['0', 'TP1', 'TP2', 'Pos'])\n\nfor gx in range(grid_step, w + 1, grid_step):\n    ax.axvline(x=gx, color='gray', linestyle='dotted')\nfor gy in range(grid_step, h + 1, grid_step):\n    ax.axhline(y=gy, color='gray', linestyle='dotted')\n\nfor i in [1, 2]:\n    ax.axvline(x=x[i], linestyle='dashed')\n    ax.axhline(y=y[i], linestyle='dashed')\n\nax.plot(x, y, marker='o', linestyle='solid')\n\nax.set_xlabel(\"Negatives\")\nax.set_ylabel(\"Positives\")\nplt.show()","type":"content","url":"/chapter2#racc-unbalanced","position":19}]}